# auto_push.ps1

# 1. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
Set-Location -Path $PSScriptRoot

# 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–≥–æ–≤
$logFile = Join-Path $PSScriptRoot "push_log.txt"
"" | Out-File $logFile  # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
$logLines = @()
$now = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$logLines += "=== –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: $now ==="

Write-Host "üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–æ–≤ –¥–ª—è dummy update..."

# 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã
$updatedFiles = @()
$pyFiles = Get-ChildItem -Recurse -Filter *.py | Where-Object {
    $_.FullName -notmatch "__pycache__" -and
    $_.FullName -notmatch "\\venv\\" -and
    $_.FullName -notmatch "\\env\\"
}

foreach ($file in $pyFiles) {
    $content = Get-Content $file.FullName
    if ($content -notcontains "# dummy update") {
        Add-Content -Path $file.FullName -Value "`n# dummy update"
        $logLines += "‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: $($file.FullName)"
    } else {
        $logLines += "‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç dummy update): $($file.FullName)"
    }
}

# 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
git add .

# 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
$commitMessage = "Auto commit with dummy update $now"

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
if (-not (git diff --cached --quiet)) {
    git commit -m $commitMessage
    $logLines += "üìù Commit: $commitMessage"

    git pull --rebase origin main
    git push origin main

    $logLines += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub."
} else {
    $logLines += "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞. –í—Å—ë —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."
}

$logLines += "=== –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ==="

# 7. –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
$logLines | Tee-Object -FilePath $logFile
