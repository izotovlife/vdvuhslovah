# auto_push.ps1

# auto_push.ps1

# –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å–∫—Ä–∏–ø—Ç–∞
Set-Location -Path $PSScriptRoot

# –û—á–∏—Å—Ç–∫–∞ .pyc –∏ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–±–µ–∑ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç)
Get-ChildItem -Recurse -Include __pycache__, *.pyc -Force |
    Where-Object { $_.FullName -notmatch '\\venv\\' } |
    Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
$gitStatus = git status --porcelain
if (-not $gitStatus) {
    Write-Host "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–æ." -ForegroundColor Green
    exit
}

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
$now = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$commentLine = "# updated $now"

# –ù–∞–π—Ç–∏ .py —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
$files = Get-ChildItem -Recurse -Include *.py -File | Where-Object {
    $_.FullName -notmatch '\\(migrations|venv|.git|.idea|.vscode|__pycache__)\\'
}

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
foreach ($file in $files) {
    $content = Get-Content $file.FullName -Raw
    if ($content -notmatch [regex]::Escape($commentLine)) {
        Add-Content -Path $file.FullName -Value "`n$commentLine"
    }
}

# –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git
git add .

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
Write-Host "`nüìÑ –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:" -ForegroundColor Cyan
git diff --cached --name-only | ForEach-Object { Write-Host "‚Ä¢ $_" }

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
$branch = git rev-parse --abbrev-ref HEAD

# –ö–æ–º–º–∏—Ç (–µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É)
git commit -m "Auto commit with dummy update $now" 2>$null

# Push
git push origin $branch

Write-Host "`n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub ($branch, $now)" -ForegroundColor Green
